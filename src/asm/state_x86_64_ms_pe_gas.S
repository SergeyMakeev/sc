/*
 * Copyright (c) 2017 Johan Sk√∂ld
 * License: https://opensource.org/licenses/ISC
 */

/****************************************************************************************
 *                                                                                      *
 *  ----------------------------------------------------------------------------------  *
 *  |    0x0  |    0x4  |    0x8   |    0xc  |   0x10  |   0x14  |   0x18  |   0x1c  |  *
 *  ----------------------------------------------------------------------------------  *
 *  |                 XMM15                  |                 XMM14                 |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0x20  |   0x24  |   0x28   |   0x2c  |   0x30  |   0x34  |   0x38  |   0x3c  |  *
 *  ----------------------------------------------------------------------------------  *
 *  |                 XMM13                  |                 XMM12                 |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0x40  |   0x44  |   0x48   |   0x4c  |   0x50  |   0x54  |   0x58  |   0x5c  |  *
 *  ----------------------------------------------------------------------------------  *
 *  |                 XMM11                  |                 XMM10                 |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0x60  |   0x64  |   0x68   |   0x6c  |   0x70  |   0x74  |   0x78  |   0x7c  |  *
 *  ----------------------------------------------------------------------------------  *
 *  |                 XMM9                   |                 XMM8                  |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0x80  |   0x84  |   0x88   |   0x8c  |   0x90  |   0x94  |   0x98  |   0x9c  |  *
 *  ----------------------------------------------------------------------------------  *
 *  |                 XMM7                   |                 XMM6                  |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0xa0  |   0xa4  |   0xa8   |   0xac  |   0xb0  |   0xb4  |   0xb8  |   0xbc  |  *
 *  ----------------------------------------------------------------------------------  *
 *  |       align       |      fbr_strg      |     fc_dealloc    |       limit       |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0xc0  |  0xc4   |   0xc8   |   0xcc  |   0xd0  |   0xd4  |   0xd8  |   0xdc  |  *
 *  ----------------------------------------------------------------------------------  *
 *  |        base       |         R12        |        R13        |        R14        |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0xe0  |  0xe4   |   0xe8   |   0xec  |   0xf0  |   0xf4  |   0xf8  |   0xfc  |  *
 *  ----------------------------------------------------------------------------------  *
 *  |        R15        |        RDI         |        RSI        |        RBX        |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |  0x100  |  0x104  |  0x108   |  0x10c  |  0x110  |  0x114  |  0x118  |  0x11c  |  *
 *  ----------------------------------------------------------------------------------  *
 *  |        RBP        |       hidden       |        RIP        |        EXIT       |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |  0x120  |  0x124  |  0x128   |  0x12c  |  0x130  |  0x134  |  0x138  |  0x13c  |  *
 *  ----------------------------------------------------------------------------------  *
 *  |                                 parameter area                                 |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |  0x140  |  0x144  |  0x148   |  0x14c  |  0x150  |  0x154  |  0x158  |  0x15c  |  *
 *  ----------------------------------------------------------------------------------  *
 *  |       NULL        |         FCTX       |        DATA       |       align       |  *
 *  ----------------------------------------------------------------------------------  *
 *                                                                                      *
 ****************************************************************************************/

#ifdef SC_META_INCLUDED

/*.file	"state_x86_64_ms_pe_gas.S"*/
.text
.p2align 4,,15
.globl	sc_context_state
.def	sc_context_state;	.scl	2;	.type	32;	.endef
.seh_proc	sc_context_state
sc_context_state:
.seh_endprologue

    /* first arg : sc_state_t to populate (rcx) */
    /* second arg : context to populate from (rdx) */

    /* set the CPU type to SC_CPU_TYPE_X64 */
    movq    $2, %r8
    movq    %r8, (%rcx)

    /* if the context is NULL we want the current context */
    test    %rdx, %rdx
    jz      current_ctx

    /* copy rdi/rsi, so we can restore them later (non-volatile) */
    movq    %rdi, %r8
    movq    %rsi, %r9

    /* copy the context's r12, r13, r14, r15, rdi, rsi, rbx, and rbp */
    leaq    0x08(%rcx), %rdi
    movq    $8, %rcx
    leaq    0xc8(%rdx), %rsi
    cld
    rep movsq

    /* copy the context's rip, as it will be when we jump back */
    lea     0x110(%rdx), %rsi
    movsq

    /* copy the context's rsp, as it will be when we jump back */
    lea     0x118(%rdx), %rsi
    movq    %rsi, (%rdi)

    /* restore rdi/rsi */
    movq    %r8, %rdi
    movq    %r8, %rsi

    ret

current_ctx:

    /* populate the state from the current state */
    movq    %r12, 0x08(%rcx)
    movq    %r13, 0x10(%rcx)
    movq    %r14, 0x18(%rcx)
    movq    %r15, 0x20(%rcx)
    movq    %rdi, 0x28(%rcx)
    movq    %rsi, 0x30(%rcx)
    movq    %rbx, 0x38(%rcx)
    movq    %rbp, 0x40(%rcx)

    /* rip and rsp need special handling since we don't want to include this function */
    movq    (%rsp), %r8
    lea     0x8(%rsp), %r9
    movq    %r8, 0x48(%rcx) /* rip */
    movq    %r9, 0x50(%rcx) /* rsp */

    ret

.seh_endproc

.section .drectve
.ascii " -export:\"sc_context_state\""

#endif /* SC_META_INCLUDED */